{
    "description": "NPM包依赖分析器",
    "commands": {
        "analyze": {
            "argument": [
                { "description": "所需分析的根目录." }
            ],
            "description": "基于依赖关系递归分析当前目录下的node_modules.", 
            "options": {
                "scope": {
                    "description": "设置依赖包检测的scope."
                },
                "depth": {
                    "default": "不设深度.",
                    "description": "设置最大递归深度."
                },
                "json": {
                    "description": "将结果输出为JSON文件, 否则打印至命令行."
                },
                "noweb": {
                    "description": "完成分析后不启动网页视图."
                },
                "format": {
                    "description": "是否自动格式化JSON文件."
                },
                "default": {
                    "description": "不询问任何问题, 采用默认设置."
                },
                "host": {
                    "description": "视图网页开启的地址."
                },
                "port": {
                    "description": "视图网页开启的端口号."
                },
                "diagram": {
                    "description": "是否将结果转化为DirectedDiagram有向图结构."
                },
                "console": {
                    "description": "是否将结果打印至控制台."
                },
                "manager": {
                    "description": "指定该项目的包管理器。"
                }
            }
        },
        "detect": {
            "description": "基于文件递归扫描当前目录下的node_modules.",
            "argument": [
                { "description": "所需扫描的根目录." }
            ],
            "options" : {
                "show": {
                    "description": "扫描完后将所有探测到的包打印到命令行."
                }
            }
        },
        "get": {
            "description": "从'registry.npmjs.org'获取包的信息.",
            "argument": [
                { "description": "查询的包名或id." }
            ],
            "options": {
                "version": {
                    "description": "指定获取的包版本范围（遵循semver）."
                },
                "all": {
                    "description": "获取所有符合-v选项指定版本范围的包, 否则自动获取符合范围的最新版本."
                }
            }
        }
    },
    "commons": {
        "error": "错误"
    },
    "line": {
        "default": "默认",
        "input.dir": "输入包目录",
        "input.name": "输入包名",
        "input.outJson": "是否输出JSON文件",
        "input.outJsonDir": "输出的JSON文件名",
        "input.depth": "递归深度",
        "input.port": "端口号"
    },
    "logs": {
        "cli.ts": {
            "dirNotExist": "目录不存在!",
            "pkgJsonNotExist": "%s根目录下的package.json文件不存在!",
            "detected": "检测到 %s 个依赖包.",
            "noDependency": "该项目未安装任何依赖.",
            "jsonSaved": "分析结果已保存至%s.",
            "detectPkg": "扫描到的依赖包文件数:"
        },
        "express.ts": {
            "start": "网页视图已在 %s 打开."
        },
        "utils/analyze.ts": {
            "nowComplete": "当前",
            "analyzed": "已分析 %d 个依赖包."
        },
        "utils/recurUtils.ts": {
            "coverage": "递归深度: %d, 覆盖率: %cv. 有 %len 个依赖包尚未分析到.",
            "notInHash": "以下 %len 个依赖包在node_modules中存在且被扫描, 但没有被依赖分析检测到.",
            "notInHash2": "这些包有可能未被使用?",
            "notInList": "以下 %len 个依赖包在node_modules被依赖分析检测到, 但未被文件扫描到.",
            "optNotMeet": "发现 %d 个可选依赖包没有安装.",
            "rangeInvalid": "发现 %d 个依赖包版本%rangeInvalid2.",
            "rangeInvalid2": "不合要求",
            "pkgNotFound": "发现 %d 个必需依赖包%pkgNotFound2:",
            "pkgNotFound2": "未安装",
            "pkgNotFound3": "请确认所有依赖包是否安装完整."
        }
    }
}